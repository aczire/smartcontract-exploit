{
  "contractName": "KothEx",
  "abi": [
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    }
  ],
  "bytecode": "0x60606040523415600e57600080fd5b603580601b6000396000f3006060604052600080fd00a165627a7a72305820de65cd58cbefe34a5f600956a342925c8d10a570a4c1d73ffad805fd720bf9e90029",
  "deployedBytecode": "0x6060604052600080fd00a165627a7a72305820de65cd58cbefe34a5f600956a342925c8d10a570a4c1d73ffad805fd720bf9e90029",
  "sourceMap": "238:169:4:-;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "238:169:4:-;;;389:8;;",
  "source": "pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title King of the Hill Exploit\r\n * @dev A user pays the king the \"attackPrice\" to take over the\r\n * @dev hill for 1 more Ether than that king paid.\r\n * @dev But what if we want to rule for ever!\r\n**/\r\ncontract KothEx {\r\n    /**\r\n     * @dev Callback function to reject all payments towards this address.\r\n    **/\r\n    function () external payable {\r\n\t\trevert();\r\n\t}\r\n\r\n}\r\n",
  "sourcePath": "D:\\Development\\blockabale\\truffle\\Blockable\\smartcontract-exploit\\contracts\\kothEx.sol",
  "ast": {
    "absolutePath": "/D/Development/blockabale/truffle/Blockable/smartcontract-exploit/contracts/kothEx.sol",
    "exportedSymbols": {
      "KothEx": [
        441
      ]
    },
    "id": 442,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 433,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".19"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:4"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title King of the Hill Exploit\r\n@dev A user pays the king the \"attackPrice\" to take over the\r\n@dev hill for 1 more Ether than that king paid.\r\n@dev But what if we want to rule for ever!\r*",
        "fullyImplemented": true,
        "id": 441,
        "linearizedBaseContracts": [
          441
        ],
        "name": "KothEx",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 439,
              "nodeType": "Block",
              "src": "384:18:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 436,
                      "name": "revert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 457,
                      "src": "389:6:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 437,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "389:8:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 438,
                  "nodeType": "ExpressionStatement",
                  "src": "389:8:4"
                }
              ]
            },
            "id": 440,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 434,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "364:2:4"
            },
            "payable": true,
            "returnParameters": {
              "id": 435,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "384:0:4"
            },
            "scope": 441,
            "src": "355:47:4",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 442,
        "src": "238:169:4"
      }
    ],
    "src": "0:409:4"
  },
  "legacyAST": {
    "absolutePath": "/D/Development/blockabale/truffle/Blockable/smartcontract-exploit/contracts/kothEx.sol",
    "exportedSymbols": {
      "KothEx": [
        441
      ]
    },
    "id": 442,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 433,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".19"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:4"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title King of the Hill Exploit\r\n@dev A user pays the king the \"attackPrice\" to take over the\r\n@dev hill for 1 more Ether than that king paid.\r\n@dev But what if we want to rule for ever!\r*",
        "fullyImplemented": true,
        "id": 441,
        "linearizedBaseContracts": [
          441
        ],
        "name": "KothEx",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 439,
              "nodeType": "Block",
              "src": "384:18:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 436,
                      "name": "revert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 457,
                      "src": "389:6:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 437,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "389:8:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 438,
                  "nodeType": "ExpressionStatement",
                  "src": "389:8:4"
                }
              ]
            },
            "id": 440,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 434,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "364:2:4"
            },
            "payable": true,
            "returnParameters": {
              "id": 435,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "384:0:4"
            },
            "scope": 441,
            "src": "355:47:4",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 442,
        "src": "238:169:4"
      }
    ],
    "src": "0:409:4"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.19+commit.c4cbbb05.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.0",
  "updatedAt": "2018-03-09T04:47:15.191Z"
}